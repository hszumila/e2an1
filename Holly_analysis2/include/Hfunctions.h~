#ifndef FUNCTIONS_H_INCLUDED
#define FUNCTIONS_H_INCLUDED

double max_outta_three ( double A , double B, double C ){
  
  double temp_max, max_val;
  
  temp_max = TMath::Max(A,B       );
  max_val  = TMath::Max(C,temp_max);
  
  return max_val;
}

TLorentzVector correctPn(TLorentzVector mom_n, double eIn, double eOut){
  double a,b,c;
  
  TVector3 mom = mom_n.Vect();
  double P = mom.Mag();
  
  //inner EC
  if (eIn>0.01 && eOut<0.01){
    a = 0.230042;
    b = -0.3888288;
    c = 0.1421874;
  }
  //outer EC
  else if (eIn<0.01 && eOut>0.01){
    a = 0.5843257;
    b = -0.8823494;
    c = 0.309747;
   }
  //both
  else {
    a = 0.230042;
    b = -0.3888288;
    c = 0.1421874;
  }

  double newMag;
  if (P>2.1){newMag = P - P*(a+b*2.1+c*2.1*2.1);}
  else if (P<0.5){newMag = P - P*(a+b*0.5+c*0.5*0.5);}
  else{newMag = P - P*(a+b*P+c*P*P);}
  
  TVector3 unit = mom.Unit();
  unit.SetMag(newMag);

  mom_n.SetVect(unit);
  
  return mom_n;
}

TLorentzVector calculatePn(double beta, TLorentzVector mom){

  TVector3 pn = mom.Vect();
  TVector3 unit = pn.Unit();
  double corrP = Mn*beta/sqrt(1.0-beta*beta);
  unit.SetMag(corrP);
  mom.SetVect(unit);
  return mom;

}


bool p_points_to_EC_fid(TVector3 pm, double vtx_z, double dist){
	double r, pm_phi, x_rot, y_rot, angle, pm_theta, third_theta, d_intercept;
	double pi = 22./7.;

	const double ec_theta =  65.*pi/180.; // degrees
	const double z0       =  516.9152;//563.1; // cm

	// Using law of sines to determine distance from vertex to EC
	pm_theta    = pm.Theta();
	third_theta = (pi - ec_theta - pm_theta);

	r = (z0-vtx_z)*sin(ec_theta)/sin(third_theta);

	double Xmiss = r*sin(pm.Theta())*cos(pm.Phi());
	double Ymiss = r*sin(pm.Theta())*sin(pm.Phi());

	pm_phi = 180./pi*pm.Phi();
	if (pm_phi < -30.) pm_phi += 360.;
	int sec = (int)(pm_phi+30)/60;
	if (sec>5) sec = 5;
	if (sec<0) sec = 0;

	angle = pi/180.*60.*(sec);

	x_rot = Xmiss*cos(angle) + Ymiss*sin(angle);
	y_rot = Xmiss*sin(angle) - Ymiss*cos(angle);

	d_intercept = dist/cos(atan(1.73));

	return((x_rot<390.-dist)&&(x_rot>1.73*abs(y_rot)+55.+d_intercept));
}


Double_t func_fit(Double_t *x, Double_t *par){
  Double_t xx = x[0];
  Double_t value;
  if     (xx <  par[0]){value = par[1]*xx    +par[2];}
  else if(xx >= par[0]){value = par[1]*par[0]+par[2];}
  return value;
}

Double_t func_fitEG2(Double_t *x, Double_t *par){
  Double_t xx = x[0];
  Double_t value;
  if     (xx <  par[0]){value = par[1]*xx    +par[2];}
  else if(xx >= par[0]){value = par[1]*par[0]+par[2];}


  if(xx>0.5 && xx<1.){value *= 1.24;}
  else if (xx>=1. && xx<1.5) {value *= 1.21;}
  else if (xx>=1.5 && xx<2.) {value *= 1.22;}
  else if (xx>=2. && xx<2.5) {value *= 1.15;}
  
  return value;
}

Double_t func_fitExt(Double_t *x, Double_t *par){
  Double_t xx = x[0];
  Double_t value;
  if     (xx <  par[0]){value = par[1]*xx    +par[2];}
  else if(xx >= par[0] && xx<par[3]){value = par[4]*xx+(par[1]-par[4])*par[0]+par[2];}
  else {value = par[4]*par[3]+(par[1]-par[4])*par[0]+par[2];}
  return value;
}
// ====================================================================================================================================================
void fit_gfunction(TH1F * gPlot, float minx, float maxx){
  Double_t par[3] = {1.5,0.3,0.1};
  TF1* Func = new TF1("Func", func_fit, 0.6,2.1,3);
  Func -> SetParameters(par);
  Func -> SetParLimits(0,1.4,1.65);
  gPlot -> Fit("Func","EM","", minx, maxx);
}
void fit_gfunctionExt(TH1F * gPlot, float minx, float maxx){
  Double_t par[5] = {1.1,0.2,0.1,1.6,0.35};
  TF1* Func = new TF1("Func", func_fitExt, 0.6,2.1,5);
  Func -> SetParameters(par);
  //Func -> SetParLimits(0,0.9,1.3);
  //Func -> SetParLimits(3,1.55,1.65);
  gPlot -> Fit("Func","EM","", minx, maxx);
}

void fit_gfunctionEG2(TH1F * gPlot, float minx, float maxx){
  Double_t par[3] = {1.57,0.28,-0.11};
  TF1* Func = new TF1("Func", func_fitEG2, 0.6,2.1,3);
  //Func -> SetParameters(par);
  Func->FixParameter(0,1.57);
  Func->FixParameter(1,0.28);
  Func->FixParameter(2,-0.11);
  //Func -> SetParLimits(0,0.9,1.3);
  //Func -> SetParLimits(3,1.55,1.65);
  gPlot -> Fit("Func","EM","", minx, maxx);
}
// ====================================================================================================================================================
// polynomial background function
Double_t background(Double_t *x, Double_t *par) {
  return par[0] + par[1]*x[0] + par[2]*x[0]*x[0] + par[3]*x[0]*x[0]*x[0];
}
// Lorentzian Peak function
Double_t gaussianPeak(Double_t *x, Double_t *par) {
  return par[0]*exp(-0.5*(pow((x[0]-par[1])/par[2],2.0)));  
}
// Sum of background and peak function
Double_t fitSB(Double_t *x, Double_t *par) {
  return background(x,par) + gaussianPeak(x,&par[4]);
}

#endif
